#include <stdio.h>
#include <stdlib.h>
typedef struct element {     // تعريف بنية عنصر في القائمة
    int val; // قيمة العنصر
    struct element *suivant;     // مؤشر إلى العنصر التالي
} element;

element *creerListe() {         // دالة لإنشاء قائمة فارغة
    return NULL;                 // تعيد مؤشرًا يشير إلى .                               
                                        قائمةفارغة
} 

                // دالة لتحميل عناصر من مصفوفة إلى قائمة متصلة

element *chargerListe(int *Tab, int taille){  
element *tete = NULL;             // مؤشر إلى رأس القائمة  element *courant = NULL;        // مؤشر لمتابعة نهاية القائمة
      for (int i = 0; i < taille; i++) {
element *nouveau = (element *)malloc(sizeof(element));         // تخصيص عنصر جديد
     nouveau->val = Tab[i];          // نسخ قيمة العنصر
     nouveau->suivant = NULL;    // لا يوجد عنصر تالٍ بعده
      if (tete == NULL){ 
            tete = nouveau;
            // إذا كانت القائمة فارغة، يصبح العنصر الجديد هو الرأس      
                                    
      else 
            courant->suivant = nouveau; 
                        // ربط العنصرالجديد مع نهاية القائمة                         
                        }
     
 courant = nouveau; 
                   // تحديث المؤشر ليشير إلى العنصر الجديد
                                      }
    return tete;                  // إرجاع رأس القائمة
                                           }

                                // دالة لعرض عناصر القائمة
void afficherListe(element *L) {
  element *courant = L;           // بداية من رأس القائمة
    while (courant != NULL) { 
      printf("%d", courant->val);   // طباعة قيمة العنصر
        if (courant->suivant != NULL) {
            printf("->");       // طباعة السهم بين العناصر
                                      }
    courant = courant->suivant;  // الانتقال إلى العنصرالتالي 
                            }
    printf("->NULL\n");             
                                }

                      // دالة لحذف العنصر الأخير في القائمة
element *supprimerEnFin(element *L) {
    if (L == NULL) { 
        return NULL;              // إذا كانت القائمة فارغة
                   }
      if (L->suivant == NULL) {
           free(L);            
              
        return NULL;                // تصبح القائمة فارغة
                              }
         element *courant = L;
   while (courant->suivant->suivant != NULL) 
          {
 courant = courant->suivant; 
                        }
  free(courant->suivant);           // حذف العنصر الأخير courant->suivant = NULL;  
    return L;                        // إرجاع رأس القائمة
}

                     // دالة لإضافة عنصر جديد في بداية القائمة
element *ajouterEnDebut(element *L, int val) {
       element *nouveau = (element       *)malloc(sizeof(element));         // تخصيص عنصر جديد
    nouveau->val = val;                  // تعيين القيمة
    nouveau->suivant = L; 
                     // ربط العنصر الجديد برأس القائمةال الحالي
    return nouveau;     
                          // إرجاع العنصر الجديد كرأس القائمة
}

                       // دالة لتفريغ القائمة وحذف كل عناصرها void viderListe(element *L) {
    element *courant = L;       
                                  // بداية من رأس القائمة
    while (courant != NULL) {
        element *temp = courant; 
                               // تخزين العنصر الحالي مؤقتًا
        courant = courant->suivant; 
                                 
        free(temp);               
                                 
                             }
    printf("La liste est vide.\n");
                       // طباعة رسالة تفيد بأن القائمة فارغة
                             }

int main() {
                 
    int Tab[10] = {1, 3, 5, 7, 8, 10, 9, 11, 13,        20};
    element *liste = creerListe();   // إنشاء قائمة فارغة
  
  liste = chargerListe(Tab, 10); 

    printf("Liste initiale: ");
   
 afficherListe(liste);           // عرض القائمة الأولية

    liste = supprimerEnFin(liste); 
                                  // حذف العنصر الأخير
  
  printf("Liste après suppression en fin: ");

    afficherListe(liste);     
                                 // عرض القائمة بعد الحذف

    liste = ajouterEnDebut(liste, 40); 
                         // إضافة عنصر جديد في بداية القائمة  
  printf("Liste après ajout en début: ");
  
  afficherListe(liste);     
                                // عرض القائمة بعد الإضافة
    
viderListe(liste);    
                          // تفريغ القائمة وحذف جميع العناصر

    return 0;
}